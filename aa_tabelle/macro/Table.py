import os
import sys
import time
import logging
logging.basicConfig(level = logging.DEBUG)

sys.path.append('../../')
from frontespizio import *
from math         import log10


class Table:

    def __init__(self, cornerLabel):
        self.StartTime = time.time()
        self.CornerLabel = cornerLabel
        self.reset()

    def reset(self):
        self.HeaderRow = []
        self.HeaderColumn = []
        self.ValueDict = {}
        self.OutputFile = None

    def getNumRows(self):
        return len(self.HeaderRow)

    def getNumColumns(self):
        return len(self.HeaderColumn)

    def setValue(self, row, column, value, numDigits = 6, numEngDigits = None,
                 forceEng = False):
        if numEngDigits is None:
            numEngDigits = numDigits
        value = self.formatValue(value, numDigits, numEngDigits, forceEng)
        if row not in self.HeaderRow:
            self.HeaderRow.append(row)
        if column not in self.HeaderColumn:
            self.HeaderColumn.append(column)
        try:
            self.ValueDict[row][column] = value
        except KeyError:
            self.ValueDict[row] = {}
            self.ValueDict[row][column] = value

    def getValue(self, row, column):
        try:
            return self.ValueDict[row][column]
        except KeyError:
            return 'n/a'

    def formatValue(self, value, numDigits, numEngDigits, forceEng):
        if (value < 10**(-(numDigits - 3)) and value != 0) or forceEng:
            formatString = '%' + '.%de' % (numEngDigits - 5)
            value = formatString % value
            (mantissa, exponent) = value.split('e')
            sign = exponent[0]
            exponent = abs(int(exponent))
            value = '%s\\,{\\rm e}$%s$%d' % (mantissa, sign, exponent)
        else:
            try:
                numIntDigits = max(int(log10(value)) + 1, 1)
            except:
                numIntDigits = 1
            formatString = '%' + '.%df' % (numDigits - numIntDigits - 1)
            value = formatString % value
        return value

    def write(self, item):
        self.OutputFile.writelines(item)
        
    def endline(self):
        self.write('\n')
        
    def hline(self):
        self.write('\\hline')
        self.endline()

    def beginTable(self, size, headerColumnWidth, verticalStretch):
        self.write('\\begin{table}[htb!]\n')
        self.write('\\begin{center}\n')
        self.write('{%s\n' % size)
        self.write('\\renewcommand\\arraystretch{%f}\n' % verticalStretch)
        self.write('\\begin{tabular}{p{%s}%s}\n' %\
                       (headerColumnWidth, 'c'*self.getNumRows()))
        self.hline()
        self.endline()

    def endTable(self):
        self.endline()
        self.write('\\end{tabular}\n')
        self.write('}\n')
        self.write('\\end{center}\n')
        self.write('\\end{table}\n')

    def writeCell(self, content, endline = False):
        self.write('$%s$' % content)
        if endline:
            self.write('\\\\\n')
        else:
            self.write(' & ')

    def dumpToFile(self, outputFilePath, size = '\\scriptsize',
                   headerColumnWidth = '22 pt', verticalStretch = 1.25):
        logging.info('Writing output file %s...' % outputFilePath)
        self.OutputFile = file(outputFilePath, 'w')
        self.write('% ' + 'Generated by Table.py on %s.\n\n' % time.asctime())
        self.beginTable(size, headerColumnWidth, verticalStretch)
        self.write('\\rule[-2pt]{0pt}{14pt}')
        self.writeCell(self.CornerLabel)
        for (i, row) in enumerate(self.HeaderRow):
            self.writeCell(row, i == self.getNumRows() - 1)
        self.hline()
        self.hline()
        for (j, column) in enumerate(self.HeaderColumn):
            if j == 0:
                self.write('\\rule[0pt]{0pt}{15pt}')
            self.writeCell(column)
            for (i, row) in enumerate(self.HeaderRow):
                value = self.getValue(row, column)
                self.writeCell(value, i == self.getNumRows() - 1)
        self.hline()
        self.endTable()
        self.StopTime = time.time()
        elapsedTime = self.StopTime - self.StartTime
        self.write('\\vfill\n')
        self.write('\\hfill {\\scriptsize ')
        self.write('Generato in %.3f s il %s alle ore %s.' %\
                       (elapsedTime, date, hour_min))
        self.write('}\n')
        self.OutputFile.close()
        self.OutputFile = None
        logging.info('Done.')



if __name__ == '__main__':
    pass
